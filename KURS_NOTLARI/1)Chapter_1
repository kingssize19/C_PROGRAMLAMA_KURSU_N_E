C Dilinin Nitelikleri
---------------------------------------------------------------------------------------------------
* imperative = buyurgan
* procedural = prosedürel
* non - proprietary = mülkiyeti yok (Komite)
* middle level = orta seviyeli
* static typing = statik tür kavram (Tanımlanan değişkenlerin değerleri değişebilir fakat typeları değiştirilemez.)
* general - purpose = genel amaçlı
* efficient = verimli
* artificial = yapay
* standard = standart
* portable = taşınabilir
* expressive = ifade gücü yüksek
---------------------------------------------------------------------------------------------------
* 1969 --> traditional C, classic C, C 89/90 ilk standart (ANSI/ISO C)
* 1995 --> C99 standartı
* C11 standartı (2011)
* Algol -> CPL -> BCPL -> B  -> C
   (       TYPELESS        )
---------------------------------------------------------------------------------------------------
* Daha yüksek seviyeli bir dilden daha düşük seviyeli bir dile çeviri yapan programlara "compiler" denir.
  Source Code --> Compiler --> Object Code (Executable Machine Code)

* Front End 
  Lexical Analysis : Kaynak kodu en küçük birimlerine ayırır.
  Syntax Analysis : Dilin kurallarına uygunluğun kontrol edildiği süreç

* Back End 
  Code Generation and Optimisation

* Object kodun çalıştırılabilir bir kod haline getirilmesi için bir süreç daha gerçekleştirilmeli.
Bu sürece Linking (Bağlama) denir.

  Link -> Bağlama           Linker -> Bağlayıcı

deneme.c   --> Compiler  --> deneme.obj |
                                          --> Linker --> .exe file
deneme2.c  --> Compiler  --> deneme.obj | 

* source file -> compiler -> object code -> Linker -> executable (yürütülebilir)

* compile time : Derleme zamanı
* Link time    : Object kodların exe koda dönüştürüldüğü süreç
* run time     : executable kodu işlemcinin fiilen çalıştırdığı süreç
---------------------------------------------------------------------------------------------------
Source File (Kaynak Dosya)
        |
        |
Preprocessor (önişlemci) (preprocessing time)
        |
        |
Translation unit (çeviri birimi)
        |
        |
Compiler (derleyici) (Compile time) --> assembly code --> assembler  |
        |                                                            |
    object code        <--              <--            <--         <-- 
        |
        |
Linker (Bağlayıcı) (Link time) (Oluşturulan tüm object kodlar burada bağlanır)
        |
        |
Executable Code
---------------------------------------------------------------------------------------------------
* IDE (Integrated Development Environment)
  Geliştirme Platformları (Tümleşik Geliştirme Ortamı)

* ill formed -> Dilin kurallarını çiğneyen bir durumu bildirir. Geçerli olmayan bir program.
  zıttı -> well formed

* syntax error -> Sözdizim hatası
* invalid code -> Geçersiz kod. Kodun dilin kurallarını çiğnemesi demek. zıttı -> valid code
* illegal code -> Kodun dilin kurallarına aykırı olduğunu anlatır. zıttı -> legal code


* observable behavior -> Gözlenebilir davranış (optimizer module)

* Derleyici, programın gözlemlenebilir davranışı değişmediği sürece kodu bizim yazdığımızdan farklı şekilde düzenleyebilir.
  
* Derleyicinin en önemli modülü, kodun etkin bir şekilde makine kodlarına dönüştürülmesini sağlayan modül olan "optimizer" modülüdür.

* Yazdığımız kod farklı derleyicilerle derlendiğinde derleyicilerin ürettikleri makina kodu farklı hızlarda çalışabilir.

* Derleyici işlemci mimarisini göz önünde bulundurarak optimizasyon yapar.

* simd -> işlemcinin bir cycle'ında birden fazla işlemin yapılması.

* Derleyiciyi derleyici yapan optimizer modülüdür. 
  Derleyici kodumuzu bizim yazdığımız biçimde derlerse kodumuz yavaş çalışır.

* Debugger --> Sağladığı bir takım olanaklarla, kontrollü bir ortamda programı çalıştırarak koddaki hataları bulmamıza yardımcı olur.
---------------------------------------------------------------------------------------------------
* preprocessor (ön işlemci)
* preprocessor directive (ön işlemci talimatı (komutları))
    #include <string.h>
    #define SIZE 100

* token (atom)
* tokenizing (atomlarına ayırma)
* Bir C derleyicisi Lexical Analysis sürecinde önce tokenizing yapar. Kaynak kodu kendisi için anlamlı en küçük birimlerine ayırır.

* token --> Kaynak kodun derleyici tarafından anlam taşıyan en küçük birimi

token -> keyword (anahtar sözcük), operator, identifier (isim), constant (sabit), 
        string literal (yazı sabiti), delimiter (işleç) olabilir.
---------------------------------------------------------------------------------------------------
* latin - roman karakter seti --> A.....Z, a.....z
* 0 - 9 --> arabic numerals
* _ underscore
* İsimler rakam karakteri ile başlamazlar.
* Anahtar sözcükler isim olarak seçilmez.

* case - sensitive : Büyük/küçük harfe duyarlı
* case - insensitive : Büyük/küçük harfe duyarlı değil.

x = 345;      x --> identifier,  345 --> constant
---------------------------------------------------------------------------------------------------
* decimal system --> 561
* octal system   --> 0561  (Başa 0 ön eki gelir.)
* hexadecimal system --> 0x561  (Başa 0x ön eki gelir.)

Operators
  
  && --> logical and
  || --> logical or
  !  --> logical not
  
  ++ --> increment (plus plus)
  -- --> decrement (minus minus)

  "mustafa" --> string literal
---------------------------------------------------------------------------------------------------
* Global Namespace --> Herşeyi içine alan, bütün kodların, fonksiyonların bulunduğu yer.
* Local Namespace  --> Fonksiyonların içi.

* Statement --> Belirli bir işi gerçekleştirmek için yazdığımız c cümlelerine "statement (deyim)" denir.
  
* Declaration (Bildirim) --> Bir ismin hangi anlama geldiğini, ne olduğunu anlatan cümleler.

* Name lookup --> Kod içinde kullanılan bir ismin hangi varlığa ilişkin olduğunun anlaşılması süreci. (Derleyici tarafından anlaşılması süreci)
  (İsim arama)                                                                                                 

//Name lookup Hatası
Önce isim aranacak
                  Aranan isim bulunamaz ise sentaks hatası 

//Context hatası (context control error)
Aranan isim bulunursa
                    Kullanım şekli hatalı ise (bulunan ismin)


* Global namespace'de sadece declaration statement olur. Executable statement yer almaz.
---------------------------------------------------------------------------------------------------
* expression (ifade) --> Değişkenlerin, sabitlerin, operatörlerin bir arada bulundukları yapıya expression denir.

      x * x + y * y > 10
      x
      10
      x + 10

* expressionların data type, value, value category gibi özellikleri vardır.
  
* L value expression : Bazı ifadeler bir nesneye karşılık geliyor, bir değişkene karşılık geliyor,
                       erişebileceğimiz bellekte yeri ayrılmış bir varlığa karşılık geliyorsa buna
                       L value expression denir.

* R value expression : Bazı ifadeler bellekte doğrudan erişebileceğimiz bellek alanına, değişkene
                       karşılık gelmiyor bir hesaplamayı ifade ediyor ise R value expression denir.


statement niteleyicileri;

* expression statement (ifade deyimi)
     --> Eğer ifade geçerli ise sonuna ; koyarak geçerli bir deyim elde ederiz.
         Bu şekilde oluşturulan deyimlere expression statement denir.

* null statement
     --> Tek başına noktalı virgül'ün oluşturduğu statement'a null statement denir.

* block {} ikisinin oluşturduğu birime block denir.
  { --> left brace  (opening)
  } --> right brace (closing)

* compound statement
  {
      x++;
      --y;
      a = x + y;
  }

* control statement
  --> Önceden belirlenmiş bir sentaksı vardır.
  --> En az bir anahtar sözcük vardır.
  --> Kontrol deyimleri
      - if statement
      - while statement
      - do while statement
      - for statement
      - switch statement
      - goto statement
      - return statement
      - break statement
      - continue statement
---------------------------------------------------------------------------------------------------
* object - nesne : Değişken anlamını taşır
  a[2][5] -> p   } nesne

* data type
  1) Değişkenleri niteleyen terim
  2) Sabitleri niteleyen terim
  3) ifadeleri niteleyen terim

  type --> tip veya tür demek ikiside aynı anlamda.

* Programın çalışma zamanında o değişken (o nesne) bellekte kaç byte yer kaplayacak bunu belirleyen o değişkenin türüdür.

* storage --> Bir nesnenin bellekte yerinden bahsederken o nesneye ait bellek bloğundan bahsederken
              kullandığımız terim storage terimidir. (nesnenin bellekteki yeri)

* object/variable
        data type
        value
        storage (nesnenin bellekteki yeri)
        address

* data type
     - basic types
                      --> fundemental types 
                      --> built-in types
                      --> default types
     - user-defined types
                      --> structures
                      --> unions
                      --> enumerations
---------------------------------------------------------------------------------------------------
* expressions (ifadeler)
    data type
    value
    L value / R value
    constant expression (sabit ifadesi)

//constant expression
int main(void) {
  int arr[10 + 20];  //Hata vermez
}

//Expected constant expression
int main(void) {
  int x = 10;
  int y = 20;
  int arr[x + y];  //Hata verir. 
}
---------------------------------------------------------------------------------------------------
Numbering System
  * decimal (onluk)
  * hexadecimal (on altılık)
  * octal (sekizlik)
  * binary (ikilik)

* binary system --> 0 ve 1 lerden oluşur.

* signed (işaretli)    --> Hem negatif hem pozitif tamsayılar var.
* unsigned (işaretsiz) --> Negatif sayılar yok 0 ve pozitif tamsayılar var.

* Her basamak --> binary digit --> bit denir

* 1 byte = 8 bit       0000 1111 
* 1 KB = 2^10 = 1024 byte
* 1 MB = 2^20

* 1 byte'ın yarısına nibble denir. (4 bit)
* 1 word --> 2 byte'lık alan
* double word --> 4 byte'lık alan
---------------------------------------------------------------------------------------------------
Unsigned Binary (0 .................. pozitif number)

* 0101 0101      -->   0   1   0   1      0      1      0      1
                                       3.biti               0.biti

* 1 byte'ın tutabileceği
                        --> En küçük değer : 0000 0000 = 0
                        --> En büyük değer : 1111 1111 = 255
* 2 byte
      max = 65535
      min = 0

* 4 byte
      max = 4'294'xxx'xxx (4 milyar 294 milyon)
      min = 0

* MSB/MSD (most significant bit/digit) 
            --> En soldaki bit. En yüksek anlamlı bit.
* LSB/LSD
            --> En sağdaki bit. En düşük anlamlı bit.

-------------------------
Decimal convert to Binary
-------------------------
İkiye böl kalanı en sağ digit'ten itibaren yazmaya başla.
Example => 78
78    2         -->      0100   1110 = 78
      39   0
      19   1
      9    1
      4    1
      2    0
      1    0
      0    1

* one's complement (bire tümleyen)
* two's complement (ikiye tümleyen)

* Bire tümleyen --> bitlerin tersinin alınması
   0101 1101 ------> 1010 0010

* İkiye tümleyen --> bire tümleyen + 1
   0101 1000  ----(bire tümleyeni)---> 1010 0111 + 1 ---(ikiye tümleyeni)---> 1010 1000

* İkiye tümleyen için pratik yöntem
   --> Sağdan başlanır ilk 1 bitini görene kadar bitlerin aynısı yazılır.
   --> Ondan sonraki bitler için bitlerin tersi yazılır.

   0101 1010 --> sayı
   1010 0110 --> ikiye tümleyeni

Signed Binary 
* Aynı tamsayı değerindeki pozitif tamsayılar ile negatif tamsayılar birbirinin ikiye tümleyenidir.
* 56   -56 } birbirinin ikiye tümleyeni.
* sign bit (işaret biti) en yüksek anlamlı bit işaret bitidir.
* işaret biti 1 ise sayı negatif --> 1001 0101 (en soldaki bit 1)
* işaret biti 0 ise sayı pozitif --> 0110 0000 (en soldaki bit 0)

* İşaretli sistemdeki değeri nasıl bulur?
   --> İkiye tümleyenini al sonuç ne ise bu ifadenin sonucu bulunan sonucun -'lisi.
   1001 1100   Sayı
   0110 0100   ikiye tümleyeni değeri 100
   Asıl sayımız yani işaretli sistemdeki değeri -100

* x sayısı -91 olsun bu sayıyı ikilik sistemde göster.
ikiye tümlenmiş hali 91 olan sayı --> 0101 1011 = 91
ikiye tümlenmemiş orjinal hali    --> 1010 0101 = -91

* 1 byte'lık yazılabilecek en büyük değer --> 0111 1111 = 127
* 1 byte'lık yazılabilecek en küçük değer --> 1000 0001 = -128

1 byte   (-128   127)
2 byte   (-32'768   32767)
4 byte   (-2'147'483'648   2'147'483'647)

* İşaretli olarak bir sayının tüm bitleri 1 ise o sayı -1'dir.
İşaretli sayılarda;
   En büyük -> 01111....
   En küçük -> 10000....
   1111 1111 = -1

------------------------------------------------------
Hexadecimal System
------------------------------------------------------
* 16 tabanlı sayı sistemi.
0123456789ABCDEF

------------------------------------------------------
Hex convert Binary
------------------------------------------------------
* 1ACF sayımız olsun. Her bir değer 4 bite sığacak şekilde sırasıyla yazılır.
1 --> 0001      A --> 1010      C --> 1100      F --> 1111
(Hex) 1ACF --> (binary) 0001 1010 1100 1111

---------------------------------------------------------
Decimal convert Hex
---------------------------------------------------------
* Sayıyı sürekli 16'ya böl kalanı en sağdaki bitten itibaren yaz.
7562    16
        472   10 (A)
        29    8
         1    13 (D)
         0    1

7562 (decimal) --> 1D8A (hex)

* 2 byte'lık alanda yazılabilecek en büyük işaretli tam sayıyı hex olarak gösteriniz.
   (2 byte binary) 0111 1111 1111 1111 --> (hex) 7FFF
* 2 byte'lık alanda yazılabilecek en küçük işaretli tam sayıyı hex olarak gösteriniz.
   (2 byte binary) 1000 0000 0000 0000 --> (hex) 8000
* 2 byte'lık alanda yazılan -1 değerini hex olarak yazın.
   (2 byte binary) 1111 1111 1111 1111 --> (hex) FFFF

* Gerçek bir sayı 4 byte, 8 byte'lık alanlarda kodlanmış şekilde tutulabilir.

4 byte (single precision)
8 byte (double precision)
--------------------------------------------------------------------------------------------------------------------------------
-> () parantez
-> [] square bracket
-> {} brace
-> <> angular bracket
-> * asterisk
--------------------------------------------------------------------------------------------------------------------------------
HATIRLATMA

Undefined Behavior
               --> Kod derlendiğinde run time'da herşey olabilir. Kodumuzda asla olmaması gereken bir durum. (Tanımsız davranış)
Unspecified Behavior
               --> Kodda bir problem yok ama derleyici farklı şekilde kod üretme hakkına, şansına sahip.
İmplementation Behavior 
               --> Unspecified Behavior'a benzer. Derleyicinin nasıl kod üreteceğini belgeleme zorunluluğunun getirilmesidir.
--------------------------------------------------------------------------------------------------------------------------------
Data types: 

Basic types
         default/built-in/fundemental/primitive
User-defined types
         structures
         unions
         enumaration

* Basic types 
--> integer types (tam sayı türleri)
--> floating types (gerçek sayı türleri)


İnteger Types (Tamsayı Türleri)
-------------------------------
* Karakter Türleri
   char                1 byte -> işaretli veya işaretsiz olduğu derleyiciye bağlı
   unsigned char       1 byte -> [0   255]
   signed char         1 byte -> [-128   127]

* Tamsayı Türleri
   signed short (2 byte)
   unsigned short (2 byte)

   signed int (2/4 byte)
   unsigned int (2/4 byte)

   signed long (4/8 byte)
   unsigned long (4/8 byte)

   signed long long ((C99) 8 byte)
   unsigned long long ((C99) 8 byte)

   _Bool (C99 1 byte)

* short <= int <= long <= long long   }-> Değikenlerin byte'ları, derleyiciye göre değişiklik gösterse bile soldaki kurala uymalıdır.


* Karakter türler && Tamsayı türleri => Tamsayı türleri

* Compiler extension (derleyici eklentisi)
   Derleyicimizin bize kullandırdığı onun yapacağı çeviride anlamlı olan araçlar. Ama standart c de olmayan araçlar.


Floating Types (Gerçek Sayı Türleri)
------------------------------------

* float --> 4 byte
* double --> 8 byte (en çok kullanılan tür)
* long double --> 8/10/12/16 byte
--------------------------------------------------------------------------------------------------------------------------------
Değişkenlerin bildirimi/tanımı
------------------------------
* declaration : Bir ismin ne olduğunu, ne anlama geldiğini anlatan cümlelerdir.
* definition : Tanım
* Eğer bir bildirim derleyicinin bildirilen varlık için bir yer (storage) edinmesini sağlıyor ise böyle bildirimlere aynı zamanda definition denir.

* to define a function -> bir fonksiyonu tanımlamak
* function definition -> fonksiyon tanımı
* to call a function -> bir fonksiyonu çağırmak 
* function call -> fonksiyon çağrısı
* to declare a function -> bir fonksiyonu bildirmek
* function declaration -> fonksiyon bildirimi

* değişken_türü   değişken_ismi   --> Değişken tanımlama

         -> double dval;
         -> double dval = 3.4;   ("initialize" yani ilk değer verme) 

* Tamsayı türlerinde sadece değişken türünü yazarsak default olarak signed kabul edilir.
      signed short    --> işaretli short
      unsigned short  --> işaretsiz short
      short   --> (default) işaretli short

* sadece signed yazılarak tanımlanan değişkenin türü int kabul edilir.
      signed x --> türü int

* float / double / long double   --> signed/unsigned ile kullanılamaz. (syntax error)
--------------------------------------------------------------------------------------------------------------------------------
* life span
* storage class
   --> automatic storage (otomatik ömür) : Örnek olarak fonksiyonlar verilerbilir. Hayata gelirler kullanıldıktan sonra hayattan giderler.
   --> static storage (statik ömür) : Bellekte bunlara ayrılan yeri programın sonuna kadar korurlar.
   --> dynamic storage
   --> thread - local storage

* Global değişkenler default statik ömürlüdür. Bellekte yerleri ayrılır program sonuna kadar o yerler bu değişkenlerin olur.
* Global değişkenlerin (yani statik ömürlü değişkenlerin) ilk değerleri belirlenmediği zaman default değerleri 0 olarak hayata başlarlar.

DİKKAT!!!
* C dilinde statik ömürlü değişkenlere ilk değer veren ifadeler "sabit ifadesi" olmak zorunda.

#include <stdio.h>
int x = 7;    //constant expression (sabit ifadesi)
int y = x;   //syntax error (initializer is not a constant)

* Fonksiyonların ana bloklarının içinde tanımlanan değişkenler "local variable" (yerel değişkenler).
   --> Otomatic veya static ömürlü olabilirler.
   --> Yerel değişkenler default biçimde otomatik ömürlüdürler.

* Hem yerel değişken hemde static ömürlü olsun istiyorsak static anahtar sözcüğü kullanırız.
   --> int main() {
            int x;            //otomatik ömürlü
            static int y;     //statik ömürlü
      }


int x; --> otomatik ömürlü    default değeri-> tanımsız davranış (UB)

DİKKAT!!!
* otomatik ömürlü değişkenlere ilk değer vermez isek (yani initialize yapmaz isek) onlar hayata indetermined value yada garbage value ile başlarlar)
int x; -> çöp değer kullanıyor.
   --> x'in çöp değerini kodda kullanmıyorsak ise Tanımsız davranış yok.
int y = x; -> fakat burda x'in çöp değerini kullandığımız için tanımsız davranış var.
   --> x'in çöp değerini kodda kullanıyor isek tanımsız davranış var.

Tanımsız davranış yok!                                    Tanımsız davranış var! (Undefined Behavior)
int x;                                                    int x;
int x = 4;                                                x = x + 5;


* static ömürlü değişkenlere ilk değer veren ifadelerin constant expression olma zorunluluğu varken.
* otomatik ömürlü değişkenlere ilk değer veren ifadelerin constant expression olma zorunluluğu yok.

int x = 5; 
int y = x + 6;   --> İçinde değişken ismi olduğu için constant expression değil fakat syntax hatası vermez. Otomatik ömürlü değişken.
--------------------------------------------------------------------------------------------------------------------------------
* scope (kapsam)
* name lookup (isim arama)

--> C dilinde, kodda bildirilen bütün isimlerin "scope" u (kapsamı) vardır.
--> Bir ismin scope'u demek o ismin kullanabileceği kod alanı demektir.
--> name lookup : Kodda kullanılan isimlerin hangi varlıklara ilişkin olduğunun anlaşılması/belirlenmesi süreci

--> İsim arama bir sıra dahilinde yapılır.
         --> Yani önce şuraya bak
         --> orda bulamaz isen şuraya bak
         --> ...
--> İsim arama süreci, aranan isim bulunduğunda sona erer. Bir daha başlamaz.

-------------
scoping rules
-------------
* file scope
* block scope
* function prototype scope
* function scope

--> File scope (dosya kapsamı) : İsmin tüm dosya içinde kullanılabilir olması demektir. 
                                 Bir ismi global isim alanında bildirdiysek o isim file scope tadır.
                                 Yani tanımlandığı noktadan dosya sonuna kadar her noktada kullanılabilmesi "file scope"

--> Block scope : Block içerisinde tanıtılan isimlerin tanıtıldıkları bloğun sonuna kadar kullanılabilmeleri anlamına gelir.

--> Aynı kapsam içinde bir isim birden fazla varlığa verilemez.
--> Yerel isimler eğer kapsamları aynı "closing brace" te bitiyorsa aynı scope'tadırlar.

--> Fonksiyonların ana bloğu içinde kullanılan isimlerin aranması

--> name hiding (ismin gizlenmesi)
    name masking
    name shadowing

int x = 9;    //--> global

int main(void) {
   int x = 1;     //--> local
   printf("x = %d\n", x);      //--> local olan x'i kullanıyor. global x'in local x arkasında gizlenmesi name hiding.
}

* Global isim under score(_) karakteri ile başlatılmaz.
* Global, yerel isimler iki underscore (__) ile başlatılmamalı.
Bu kullanımlar sentaks hatası vermez fakat dile olan saygıdan dolayı bu kullanımlar dilin kendisinde rezerve edilmiştir. Bu yüzden tercih edilmezler.

* İsmin kapsamı büyüdükçe ismin daha niteleyici olması tercih edilir.
* İsimlendirmede tutarlı ve istikrarlı bir konvensiyon kullanmalıyız.
konvensiyon : önceden belirlenmiş kurallar seti
































  
  
