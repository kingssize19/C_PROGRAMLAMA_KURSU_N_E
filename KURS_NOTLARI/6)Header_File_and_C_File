-> Uzantısı .h olan dosyaya header file denir.
-> Uzantısı .c olan dosyaya implementation/code/source/.c file denir.

-> Derleyici program kullanılan fonksiyonun bildirimine ihtiyaç duyar. Bu bildirimlere .h dosyalarından ön işlemci komutu ile ulaşılır. 
Örneğin; printf() için <stdio.h> include edilmelidir.

-> Linker programınında kullanılan fonksiyonun derlenmiş haline ihtiyacı vardır. Linker derlenen kodları birleştirir.

-> Tipik bir header file'da neler bulunur;
  - Fonksiyon bildirimleri (function prototypes)
  - Değişken bildirimleri (variable declaration)
  - tür eş bildirimleri (type alias / typedefs)
  - Ön işlemci komutları (preprocessor directives)
  - Tür bildirimleri (user-defined type declarations)

DİKKAT : printf, scanf vs. gibi standart C fonksiyonlarının kodlarını (büyük ihtimalle) derleyicinizde bulamazsınız.
         Çünkü derleyiciyi yazanlar bu fonksiyonların c kodlarını yazmışlar fakat bize kaynak kodlarını vermemişler.
         Yazdıkları kodları derleyip bize derlenmiş hallerini vermişler. Yani bu fonksiyonların derlenmiş halleri obje kodları vardır.


-> Parametre değişkenleri belirtilmeden yapılan bildirime function declaration denir

   double func();

-> int foo(int, int) => function prototype

DİKKAT : Aşağıdaki bildirim func 'ın parametre değişkenine sahip olmadığı anlamına gelmiyor.

double func();  -> Fonksiyonun parametre değişkenleri hakkında bilgi verilmiyor.

double bar(void)  -> Fonksiyonun parametre değişkeninin olmadığını anlatır.

double foo(); --> Bu kullanım C++ 'da double foo(void); fonksiyonu ile aynı anlamı taşır.
                  C de böyle bir durum söz konusu değildir sadece parametre değişkenleri hakkında bilgi vermediği anlamını çıkarırız.


NOT : C'de fonksiyon bildirimi özdeş olmak şartıyla birden fazla yapılırsa hata değildir.

  int foo(int x);
  int foo(int y);
    HATA YOK

  int foo(int x);
  double foo(double y);
  double foo(double x, double y);
    HATA VAR -> Özdeş olmayan aynı isimde 3 farklı fonksiyon bildirimi.

client code = Hizmet alan kod.
server code = Hizmet veren kod.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                        Preprocessor Directives (Önişlemci Komutları)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-> Önişlemci program kendi komutlarını yürüten böylece o komutları yürütüüğünde kaynak dosyada bir takım değişiklikler gerçekleştiren programdır.

source file ----> Ön işlemci program ------Translation unit------> Derleyici program
  (Girdi)                                  (çıktı / girdi)

Ön işlemci programının komutlarının yürütüldüğü süreç -> Preprocessing time
Derleyici programın çalıştırıldığı zaman -> Compile time
Bağlayıcı (Linker) programın çalıştırıldığı zaman -> Link time
Programın çalıştırıldığı zaman -> Run time

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                Ön İşlemci Program Komutları
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#include
#define
#undef
//Aşağıdakiler conditional compiling denilen süreç için kullanılıyor
#if
#else
#elif
#endif
#ifdef
#ifndef
//
#line
#error
#pragma

-> # null directive (boş # komutu)
-> Define komutu ile önişlemciye bazı isimleri tanıtıyoruz. Bunlara macro deniliyor.

-> Önişlemci programı herhangi bir komutu yürüttüğü zaman komutun kendisinide kaynak dosyadan siliyor.
   Yani translation unit haline geldiğinde derleyicinin gördüğü kodda "#" ile başlayan satır yer almaz.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                        #include ön işlemci komutu
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h> -> Bu kullanım ile ön işlemci bu dosyayı bul, bu dosyanın içindeki kodları bu komutun bulunduğu yere yapıştır. Demek istenir.

#include <stdio.h>
default directory

#include "nutility.h"
avtual directory

<> veya "" yazım dosyanın arandığı yerin belirlenmesini sağlar.

" " -> Bizim kaynak dosyalarımız.
<> -> include adlı klasör içinde arama yapar.

------------------------------------
FONKSİYON BİLDİRİMLERİ (HATIRLATMA)
------------------------------------
* Default function declaration 

int main(void)
{
  ali(1, 3);
}
--> Normalde syntax hatası (name lookup) çünkü ali ismi yok.

Derleyici burda şunu diyor;
Ben ali ismini aradım bulamadım. Ben alinin başka bir modülde bulunan ve geri dönüş değeri int olan fonksiyon olduğunu varsayıyorum diyor.
İşte bu duruma defaul function declaration denir.

NOT : C++ dilinde "implicit function declaration" yoktur.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                              #define önişlemci komutu
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

-> define komutu ile önişlemci programa bir isim tanıtılır. (Buna macro denir.)

//symbolic constant
//manifest constant
#define SIZE 100    
-> SIZE sözcüğüne 100 değeri atanır. Bundan sonra SIZE yazılan yerleri derleyici 100 olarak yorumlar.

NOT : Ön işlemci programı açısından bloğun hiçbir önemi yok. Yani scope kavramı yoktur. Yazıldığı yerden programın en son satırına kadar heryerde geçerlidir.

void foo(void)
{
  #define SIZE 100
}
      . . .
      . . .
-> Sadece bu blok içerisindeki SIZE'lar 100 olmaz blok dışı aşağıya kadar kodda bulunan tüm SIZE lar 100 olur.
-> Yalnızca bu komutun üstünde SIZE kullanılırsa geçerli bir kullanım olmaz.

Örneğin;
int x = SIZE;
#define SIZE 100
-> Yanlış kullanım şekli. Makronun x'in intialize'ından önce yazılması gerekirdi.

Replacement'in yapılabilmesi için (değiştirme işleminin olması için)
Önişlemci programı
a) Komutun altında kalan kod alanına bakar, üstünde kalan kod alanına bakmaz.
b) Komutun bir blok içine yazılması özel bir anlam (scope) ifade etmez.

-> Replacement'in olabilmesi için ismin kod içinde bir "token" olarak kullanılması gerekir.

Örnek; 
#define SIZE  100+200
x = 5 * SIZE;   //-> x = 5 * 100 + 200;
-> 100+200 ifadesinde bir hesaplama yapılmaz. O ifade kod içerisinde SIZE yerine yapıştırılır.

Örnek;
#define NEC 100;    --> NEC yerine 100; ifadesini yaz.
int main()
{
  int x;
  x = NEC;   //-> Burada bir syntax hatası yoktur. x = 100;; --> x = 100; expression statement.  ; null statement.
  ++x;
}

-------------------------o-------------------------
NOT : Macro olan bir isim için replacement 'in bir string literal olmasında teknik açıdan sıkıntı yoktur.

#define NEC   "necati ergin"
-------------------------o-------------------------
NOT : Aşağıdaki kullanım şekli hatalıdır. Macro bir isim olmalıdır. İki sabit ifade kullanılmaz.

#define  100    200    --> Bu şekilde kullanılmaz.

->C programlamada makro olan isimler genellikle all-caps olarak seçilirler. (Büyük harfle yazılırlar.)
-------------------------o-------------------------
ÖNEMLİ : Makro tanımlamalarında alt satırdan devam edebilmek için \ işareti konulur.

#define NEC 100+200+
300
-> Makro "NEC  100+200+" ifadesi oldu. 300 dahil edilmez.


#define NEC 100+200+\
300
-> Makro "NEC  100+200+300" ifadesi oldu. 300 bu kullanım şekli ile dahil edildi.

Bir başka örnek;
#define FUNDEFF int max(int a, int b) { \
if (a > b) \
  return a; \
return b; \
}

Aşağıdaki şekilde macro tanımlaması yapılabilir.
#define  NEC  100
#define  ERG  NEC

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                            MAKRO KULLANIM YÖNTEMLERİ
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-> Sabitlerin isimlendirilerek kullanılması

NOT : Bazı kütüphanelerde türlere ön işlemci aşamasında alternatif isimler vermek için makrolar kullanılır.

-> Embedded programlamada sabitleri isimlendirmek kod okunurluğu açısından çok iyi olur.

-> C dilinde bir sabit olarak kullanılacak bir isim oluşturmanın en az 3 yolu vardır.
- symbolic constants / manifest constant (makrolar bunu işledik.)

- enumarations
- const variables  (Bu ikisini ilerleyen notlarda işleyeceğiz.)

DİKKAT : Gerçek sayı sabitleri kodlama hatalarına kapı açan varlıklardır.

-> Gerek C standartı gerekse 3. parti kütüphaneler makroları bazı durumlarda taşınabilirlik (portability) sağlamak için kullanıyor.

int main(void)
{
  int x = 2'147'987'225;
}
Yanlış Kullanım. Çünkü 4 byte'lık sistem için doğru fakat başka pc'de derleyicide bu işaretli int türü için max değer olmayabilir.
Bu durumda standartın kabul ettiği macro kullanılarak max değeri kullanıldığı sisteme göre değişiklik gösteren makro kullanılır.

int main(void)
{
  int x = INT_MAX;
}
Taşınabilirlik açısından geçerli bir kullanım. Sistemde işaretli int türünün storage değerine göre maksimum değer değişkenlik gösterir. Bu durum taşınabilirliğe
olanak sağlar.


Makro tanımlamalarında;
-> İşaretsiz tamsayılar söz konusu olduğunda sabitleri hexadecimal sayı sisteminde yazmak bazı avantajlar sağlayabilmektedir.
-> İşaretli tamsayılarda daha çok decimal sayı sistemi kullanılır.
NOT : Sebebi ilerleyen notlarda anlatılacaktır.


-> Bazı int parametreler any integer value (isprime() fonksiyonuna yollanan parametre)
-> Bazı int parametreler boolean (0 veya non-zero)
-> Bazı int parametreleri enumaration olarak kullanılıyor.

Yani biz fonksiyona 0, 1, 2, 3... vb. sabitlerden birini yollayacağız ama aslında fonksiyona yolladığımız değer sabitin kendisi değil bizim tercihimiz.
Mesela;
void func(int font,  ) bir fonksiyon olsun.
Bu fonksiyonun tanımı şu şekil olsun 0 yollarsan Arial, 1 yollarsan Calibri, 2 yollarsan Times New Roman... vb. font belirlememizi sağlasın.

Aşağıdaki şekilde kullanım yaparsak hataya yer vermeyiz.
func(FONT_CALIBRI,  )
int değer yerine böyle macro kullanılıyorsa hata riski azalır.


-------------------------o-------------------------
#define INT_MIN  (-2147483647 - 1)
Neden bu şekilde tanımlanmıştır? (İşaretli minimum integer değeri.)

-> Sabitlerde negatif (-) sabit yoktur.
Sabit kısmı olabilecek max değer 2147483647 'dir. 
-2147483647 yazarsak sabit bu olur ve türü hala integer.

Direkt 2147483648 yazarsak bu sabit integer sayı türünü aşar dolayısıyla bu sabitin türü integer olmaktan çıkar.
-2147483647  -  1
   (int)      (int)
sonuç integer, en küçük işaretli int türündeki sayı.

Ama bu sabiti -2147483648 şeklinde yazarsak ilgili derleyiciye göre türü değişir.
-------------------------o-------------------------

NOT : C++ dilinde makro kullanımı minimize edilmiş durumda.

* object-like macro
* function-like macro  //Fonksiyon çağrısı gibi görüntü verdiği için böyle deniyor. Gerçekte fonksiyon çağrısı değil.


#define   MAX(a, b)    ((a) > (b) ? (a) : (b))

int main(void)
{
  int x = 10;
  int y = 20;
  int z = MAX(x, y);
  //int z = ((x) > (y) ? (x) : (y));  --> Aslında fonksiyon çağrısı yok önişlemci komutu parametrik bir replacement yapıyor kodu bu hale getiriyor.
}


-------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                  Functional Macro
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define SQUARE(a)    a*a        // kare alan fonksiyonel makro

int y = SQUARE(x);    --Derleyicinin gördüğü kod-->  x*x; 
int y = SQUARE(x+1)   --Derleyicinin gördüğü kod--> x+1*x+1;
-> Yanlış hesaplamaların, işlem önceliklerinin önüne geçmek için macronun bileşenlerini paranteze almakta fayda vardır. Yukarıda verilen örneklerde 2. ifade 
sonucu istediğimiz çıktıyı elde edemeyeceğiz. Bu yüzden öncelik parantezi kullanmakta fayda vardır.

#define   SQUARE(a)    ((a)*(a))    
Bu şekilde makroyu tanımladığımızda daha sağlıklı sonuçlar elde ederiz.

-> Fonksiyonel bir makro oluşturduğunuzda makroyu dıştan parantez içine alın ve makro argümanlarının geçtiği heryeri tekrar ilave öncelik parantezine alın.

- #define    MAX(x, y)    ((x) > (y) ? (x) : (y))
- #define    MIN(x, y)    ((x) < (y) ? (x) : (y))
- #define    ISLEAP(y)    ((y) % 4 == 0 && ((y) % 100 != 0 || (y) % 400 == 0))
- #define    ISUPPER(c)   ((c) >= 'A' && (c) <='Z')
- #define    ISLOWER(c)   ((c) >= 'a' && (c) <= 'z')
- #define    ISALPHA(c)   (ISUPPER(c) || ISLOWER(c))

-> Dizinin boyutunu veren makro;
#define    ASIZE(a)    (sizeof(a) / sizeof(*a))

DİKKAT : if isupper(ch)    //Kullanım şekli, eğer isupper makrosu yukarıdaki gibi parantezlerle tanımlandıysa en dıştaki parantez if'in parantezi kabul edilir.
Bu yüzden syntax hatası olmaz.


-> Fonksiyon yerine makro kullanarak derleyicinin daha etkili bir kod üretmesini sağlamak (MAKRO KULLANMA NEDENİ)
-> Makrolar fonksiyon olmadığı için derleyicinin optimizasyon yapabildiği kod alanını büyütüyorlar. 
   Eğer fonksiyon olsa derleyici o fonksiyon kodlarını göremediği için optimizasyon yapamazdı.

HATIRLATMA : Bir nesne bir yan etkiye maruz iken bir sequence point'e uğramadan o nesneyi aynı ifade içinde tekrar kullanamayız. (Tanımsız Davranış U.B.)

#define    SQUARE(x)    ((x)*(x))
int ival = 5;
int a = SQUARE(val++);    //Undefined behavior

BİLGİ : Fonksiyon tanımında fonksiyon isminin parantez içine alınması fonksiyon tanımlama sentaksını bozmaz.
int (foo)(int a, int b)
{
  return a * b;
}
Sentaksı herhangi bir şekilde bozmaz.


ÖNEMLİ : Aynı isimli fonksiyon tanımı ve makronun ortak dosyada olmasının 2 yolu vardır. 

1) Fonksiyon tanımı yukarıda, makro tanımı onun altında yapılacak.

1|  int square(int a)
2|  {
3|    return a * a;
4|  {
5|
6|  #define   square(x)    ((x)*(x))  

2) Makro tanımı daha yukarıda olacak fakat fonksiyon tanımında fonksiyon ismini parantez içine alacağız. Diğer türlü makro fonksiyon isminin yerine kendi değerini
replacement eder.

1|  #define    square(x)    ((x)*(x))
2|
3|  int (square)(int a)
4|  {
5|    return a * a;
6|  }

NOT : Aynı isimli makro ve fonksiyon varsa, aynı zamanda ilave önlem alınmadıysa herhangi bir kullanımda fonksiyonel makroyu seçmiş oluruz
      Çünkü fonksiyonel makro önişlemci programı sürecinde ele alınıyor.

int y = square(x);    // Makroyu seçmiş oluruz.
int y = (square)(x);  // Fonksiyonu seçmiş oluruz.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                        Functional Macro    vs       Functions
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*Functional Macro
-----------------
- Makrolar generic yani türden bağımsızlar
  #define  max(a, b)    (a > b ? a : b)
  Her tür için kullanılabilir.

- Fonksiyonel makrolar birçok durumda code size'ı büyütme eğiliminde.
  Code size'ı büyütme eğiliminden dolayı gömülü sistem alanında kullanımları tercih edilmez.

- Fonksiyonel makrolar, debugger'ların sevdiği araçlar değillerdir.

- Makrolar için adresleri var tabiri kullanılmaz. Sadece yer değiştirme işlemine tabi tutulutlar. (Macro 'nun adresi yoktur.)

- Macrolar kodlama hatası riskini arttırıyor.

*Functions
----------
- Fonksiyonlar generic değildir, türe bağlıdırlar.
  int max2(int x, int y)
  {
    //int türü için kullanılır. Double türü vs. için kayıp olur.
  }
  Her tür için fonksiyon yazılmalı.

- Fonksiyonlar, fonksiyonel macrolara göre daha çok debugger dostudur.

- Fonksiyonların adresleri var birçok işi gerçekleştirmek için C ve C++ dillerinde fonksiyon adresleri yoğun olarak kullanılıyor.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                          preprocessor  operators (Önişlemci Operatörleri)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
##
Yukarıdaki operatörler fonksiyonel makrolarda kullanılıyor.

defined -> (conditional compiling 'de kullanılıyor.)

# -> stringification/stringizing dizge yapma

Dikkat : #define -> burdaki # farklı, makro tanımında kullanılan # işareti.

## -> Token - pasting (atom yapıştırma)


-------------------o-------------------
# operatörü tek operand alır ve ön işlemciye operandı string yap der.
Örnek : #x --> "x"

Örnek : 
#define   fer(x)    #x
int main(void)
{
  printf(fer(necati ergin));  --> //printf("necati ergin"); ifadesi ile aynı işlemi gerçekleştirir.
}
--------------------------------------o--------------------------------------
Not; 

int x = 5;
printf("x"" = %d",x);
-> Derlenme aşamasında bu iki ayrı çift tırnak ifadeleri birleştiriliyor. Program çıktısı x = 5 olur.

Örnek;

#define    iprint(i)    printf(#i " = %d\n", i)
int main(void)
{
  int x = 10;
  int y = 13;
  int z = 27;

  iprint(x);          --> // x = 10
  iprint(x + y + z);  --> // x + y + z = 50;
}
--------------------------------------o--------------------------------------
## operandı

x##y -> xy    // İki operandı alır ve yapıştırır. Bu yüzden buna token pasting denir.

Örnek;

#define  paste(a, b)    a##b
int paste(odd, _count) = 0;    --> // 2 değeri birleştirir. Derleyici kodu int   odd_count = 0;   şeklinde görür.
--------------------------------------o--------------------------------------
* Fonksiyonel makroları kullanarak ön işlemci programa bir fonksiyon tanımı kodu yazdırmak mümkündür.

Fonksiyonel Macro Örneği;      // Hatırlatma : \ işareti ile makro yazarken alt satırdan devam edebiliriz.

#define    gmaxfunc(t)      t get_max(t x, t y, t z) \
{ \ 
  t max = x; \
  if (y > max) max = y; \
  if (z > max) max = z; \
  return max; \
}

gmaxfunc(int) --> Bu satırda get_max fonksiyonu yapıştırılır ve argüman olarak int türü verilir.

int main(void)
{
  printf("%d\n", get_max(30, 48, 37));
}
Bu şekilde ön işlemci koda fonksiyon kodu yazdırmış oluruz.

Yukarıdaki kod örneği baz alınarak şu durumlara bakılırsa;

gmaxfunc(int)
gmaxfunc(long)
gmaxfunc(float)
gmaxfunc(double)

4 farklı tür ve 4 farklı parametre türü fakat 4 adet aynı isimde fonksiyon.

overloading function C dilinde olmadığı için aynı isimde farklı türden fonksiyonlar tanımlandığı için derleyici hata verir.
C++ dilinde hata vermezdi.

Aşağıdaki yöntem ile bu hatanın önüne geçeriz. (## operatörünü kullanarak)

#define  gmaxfunc(t)    t max_##t(t x, t y, t z) \
...
...
...
}

gmaxfunc(int)  -->  int max_int(int x, int y, int z);
gmaxfunc(long) -->  long max_long(long x, long y, long z);
...
...
Bu şekilde 4 farklı isim ve türde fonksiyon oluştururuz. Ve derleyici hata vermez.

--------------------------------------o--------------------------------------
#define    SWAP(x, y)        { int temp = x; x = y; y = temp; }

int main(void) 
{
  int a = 5;
  int b = 9;
  SWAP(a, b);      //-> Sonda ; kullanarak null statement oluşturmuş oluruz. Sentaks hatası vermez.
}

Fakat aşağıdaki kullanımda if ve else arasına ";" yani statement gireceği için syntax hatası verirdi.
if (a > b)
  SWAP(a, b);
else
  a = 15;

NOT : if-else arasına statement giremez. SYNTAX ERROR

Bu kodu geçerli kılmak için yani hatayı engellemek için aşağıda yer alan yöntemdeki gibi do-while kullanılabilir.

#define       SWAP(a, b)      do { int temp = x; x = y; y = temp; } while(0)
Bu şekilde do-while kullanarak kodun açabileceği sıkıntının önüne geçmiş oluruz.
Blok içindeki kodun bir fonksiyon çağrısı gibi ifadede yer alması için do-while döngü deyimi ile böyle hile yapılır. (Önemli Mülakat Sorusu)
--------------------------------------o--------------------------------------
#define    PUBLIC

PUBLIC int func(int x)
{
  return x * x;
}

PUBLIC yerine yapıştırılacak ifade yazılmazsa derleyici bunu görmezden gelir.
Yani kodun syntaxını bozmaz fakat okuyan kişi bu şekilde okur ve ne kastetmek istediğimizi anlar.
--------------------------------------o--------------------------------------
DİKKAT : Bir makronun aynı kod içinde farklı şekilde define edilmesi tanımsız davranıştır.

#define    MAX    1000
//statement 
    .
    .
//statement
#define    MAX    5000
//statement
    .
    .
//statement

Yukarıdaki kullanım şekli tanımsız davranıştır. (Undefined Behavior)

DİKKAT : 
void func(void)
{
  #define    MAX      100
}
-> Önişlemci komutlarında, makrolarda scope kavramı yoktur. Yani MAX makrosu aşağısında bulunan tüm kod boyunca 100'ü ifade eder.
--------------------------------------o--------------------------------------
#include "Ali.h"
#include "Veli.h"

#define  MAX    100

-> Ali.h veya Veli.h dosyalarında MAX makrosu tanımlanmışsa Undefined Behavior olur.

Bunun önüne undef komutu ile geçeriz.

#define    MAX    1500
        .
        .
(MAX'a 1500 kopyalanır.)
        .
        .
#undef  MAX
#define    MAX    500
        .
        .
        .
(MAX'a 500 kopyalanır.)
        .
        .
-> Eğer arada undef kullanılmazsa tanımsız davranış olur.
-> Undef  <isim> :  Yanına gelen ismin önceden tanımlanması halinde, undef'e gelindiğinde o ismin tanımını ortadan kaldırır. Onu tanımsız hükmünde kılar.

NOT : Tanımlanmamış bir makronun undef edilmesi bir syntax hatası yada tanımsız davranış değildir.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                          Conditional Compiling (Koşullu Derleme)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-> Donanıma bağlı bir kod seçimi için olabilir.
-> İşletim sistemi farkının olması durumlarına karşın yazılabilir.
-> Dile bağlı olabilir. Yani aynı kod hem C dilinde derlenecek projeler için hemde C++ dilinde derlenecek kaynak dosyalar için kullanılıyor olabilir.
   Yani programlama dilinin ne olduğuna bağlı olarak farklı kodların derleyici tarafından görülmesini sağlayabiliriz.
-> Versiyona bağlı olabilir. Belirli bir versiyon için farklı kodların başka versiyon için farklı kodların derleyici tarafından görülmesini isteyebiliriz.
-> Localization'a bağlı olabilir. Farklı farklı ülkelerde kullanılacak olabilir.
-> Fiyata bağlı olabilir.

-> Bazı kodlar hatalı olabilir.
    x = y / z;    // z 'nin 0 olması durumunda hatalı kod tanımsız davranış.
    Fakat if (x == 0) { Hata Mesajı } Bu tip doğrulamalar ile hatalı kodlar tespit edilir.
    Bu şekilde yapılan doğrulamalara assertion (assert) denir.

-> Bu tarz kodlara açılan standart kütüphanenin fonksiyonel bir makrosunu kullanıyoruz.
   #include <assert.h>  içinde bulunan assert makrosu.
   Programı 2 sürüm şeklinde yazarız;
   Birinci sürüm debug sürümü; assert(z != 0) -> Böyle hata kontrollerinin kendi yapmış olabileceğimiz programlama hatalarının yakalanmasına yönelik kodları içeren sürüm.
   Diğeri bu kontroller yapıldıktan sonra hata olmadığına ikna olduğumuz noktada artık bu assert kontrollerinin kod içinde yer almadığı sürüm.

-> Önişlemci conditional compiling komutlarıyla debug sürümünden diğer sürüme geçerken bu kontrol kodlarını devre dışı bırakıyoruz.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                  Koşullu Derleme Komutları (Önişlemci Komutları)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#if

#endif

Her koşullu derleme komutu için;
Ön işlemci programında blok kavramı olmadığı için, içine girilecek kod alanının sonunu belirleyen komut endif önişlemci komutudur.
--------------o--------------
#if  preprocessor expression

Aşağıdaki bildirimi derleyici görecektir.
#if  1
void foo(int);
#endif
--------------o--------------
Aşağıdaki bildirimi derleyici görmeyecektir.
#if  0
void foo(int);
#endif
--------------o--------------
#define  NEC  100
#if  NEC > 50
int x = 5;
#endif

int main(void)
{
  x = 10;
}

-> Derleyici hata vermez. NEC > 50 den büyük olduğu için int x = 5; tanımını derleyici görür.
-> Fakat koşul yanlış olsaydı önişlemci bu bildirimi derleyiciye vermezdi ve derleyici x tanımlanmadı diye hata mesajı döndürürdü.
--------------o--------------
#define  NEC  5
#define  ERG  50
#if  NEC == 5 && ERG == 50    --> Burada Makro ve operatörler kullanılabilir. Fakat değişken kullanılmaz.
--------------o--------------
#define  NEC  5
#if  NEC == 5
int x = 234;
#else
int y = 44;
#endif

-> Koşul doğru ise önişlemci x 'in tanımını derleyiciye verir.
-> Koşul yanlış ise önişlemci y 'nin tanımını derleyiciye verir.
--------------o--------------
#define  NEC  15

#if  NEC > 10
#define  SIZE  100
#else
#define  SIZE  800
#endif
-> Bu kodda derleyicinin göreceği kod 100 sabitidir.
--------------o--------------
#define    USD    1
#define    EUR    2
#define    YEN    3
#define    GBP    4
#define    CURRENCY    GBP

#if  CURRENCY == USD
    const char* p = "usd";
#elif  CURRENCY == EUR
    const char* p = "euro";
#elif  CURRENCY == YEN
    const char* p = "yen";
#endif

-> Derleyicinin else-if merdiveni gibi ön işlemci komutlarındada #elif kullanılır.
-> Koşullardan hangisi doğruysa ön işlemci programı o kod bloğuna girer.
--------------o--------------
ÖNEMLİ : Tanımlanmamış makrolar 0 kabul edilir.

Örneğin;

#if NEC > 10
  int x = 5;
#endif

int main(void)
{
  x = 876;
}
-> Syntax hatası verir. x undefined. NEC makrosu tanımlanmadığı için 0 değeriymiş gibi kullanılır.
--------------o--------------
ÖNEMLİ : Koşullu bir makronun define edilmiş olup olmamasına bağlamak. (#ifdef)

#ifdef -> Ön işlemci program ifdef komutuna geldiğinde ifdef 'in operandı olan ismin tanımlanmış bir makro olup olmadığını sınar.

#ifdef  NEC  
#endif
--> NEC makrosu tanımlanmamış. Koşul yanlış kabul edilir.

#ifdef 'in zıttı #ifndef'tir.

#ifdef   NEC  -> NEC makrosu tanımlı ise koşul doğru.
#ifndef  NEC  -> NEC makrosu tanımlı değil ise koşul doğru.
--------------o--------------
Ön işlemci operatörleri 3 tanedir.
#, ##, defined.

defined -> operand olarak ön işlemci ismi alır. True veya false değeri döndürür.

defined  NEC  -> NEC makrosu tanımlı ise True, NEC makrosu tanımlı değil ise False değeri üretir.


Aşağıdaki iki yazım biçimi aynı anlamdadır.

#ifdef  NEC                                #if defined  NEC
//code         <----AYNI_ANLAMDA---->      //code   
#endif                                     #endif
          --------------o--------------
#ifndef  NEC                            #if !defined  NEC
//code         <----AYNI_ANLAMDA---->    //code
#endif                                  #endif
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                          Predefined symbolic constants (Ön tanımlı makrolar)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Predefined macro
---------------
-> Öyle makrolar var ki bunların bir define komutu olmamasına rağmen dilin kuralları gereği ön işlemci programı bunları yer değiştirmeye (replacement'a) tabi tutuyor.

__LINE__  -> Kaçıncı satırda kullanılıyorsa o satırın numarası olan tamsayı sabiti ile değişir.
__FILE__  -> Kaynak dosyanın ismi olan string literali ile değişir. "main.c"
__DATE__  -> Derleme hangi tarihte yapılıyorsa o tarihe işaret eden string literali ile değişir. "12 05 1987"
__TIME__  -> Saat değeri ile değişir. Derleme zamanının saati. "12:45:54"
__STDC__  -> Eğer derleyici extention 'ları disable edilmiş standart C derleyicisi ise __STDC__ makrosu defined kabul ediliyor.

#ifdef  __STDC__
//code
#endif
-> Eğer derleyici C derleyicisi ise ifdef içine girecek. Eğer C derleyicisi değil ise ifdef içine girmeyecek.

-> C++ tarafındada buna benzer şöyle bir makro var : __cplusplus

#ifdef  __cplusplus
//code
#endif
-> Eğer derleme işlemini yapan C derleyicisi ise buraya girmez.
   C++ derleyicisi ise C++ 'da __cplusplus makrosu tanımlı olduğu için ifdef içine girer.
--------------o----------------------------o----------------------------o--------------
#error,  #line,  #pragma
------------------------

#error komutu, ön işlemci programının abortu gibi. Bu komutun yürütülmesiyle derleme işlemi sonlandırılıyor.
Yani #error ön işlemci komutunun yürütülmesi derleme sürecini sonlandırıyor.

#error komutunun parametresi bir yazıdır.
#error  BU KOD C DILINDE DERLENMELI
-> Bu komutun yürütülmesi demek Hata ekranına bu hata mesajının yazılmasıyla compile time 'ın sonlandırılması demektir.

#ifdef  __cplusplus
#error  Bu kod c dilinde derlenmeli
#endif
-> C++ derleyicisi ise yani bu koşul doğru ise ön işlemci bunun içine girecek ve ön işlemci programı error komutunu yürütecek. Ön işlemci aşamasında derleme süreci sona erecek.
--------------o--------------

#line -> Bu ön işlemci komutu, ön tanımlı __LINE__ makrosunun ve ön tanımlı __FILE__ makrosunun değerini değiştirir.
Bazı C kodlarının varlık nedeni code generate etmektir. Yani siz bir c programı çalıştırıyorsunuz o c programı bir c kodu oluşturuyor.
line makrosuyla (ön işlemci komutuyla) kodun kendi satırı ve dosya ismiyle, üreteceği kodun satırı ve dosya ismi arasında geçiş yapılıyor.
--------------o--------------

#pragma -> Herhangi bir derleyici pragmaya bir yada birden fazla anlam katıp ona ilave işlevler yükleyebilir. 

DİKKAT : Bir derleyicinin oluşturduğu pragma bir başka derleyicide geçerli olmak zorunda değildir.


-> Bir başlık dosyasının ikinci kez include edilmesi bazı sakıncalar oluşturur.

-> multiple inclusion (çoklu dahil etme)
----------------------------------------
-> Öyle bildirimler var ki derleyici birden fazla kez gördüğünde dilin kuralları çiğnenmiş oluyor. (structure declaration (yapı bildirimleri))
-> Derleyici, özdeşte olsa bir yapı bildirimini birden fazla kez görürse syntax hatası oluşur.

-> multiple inclusion guar (çoklu dahil etmeye karşı koruma)
------------------------------------------------------------
-> Bu önlem kullanılırsa, artık hiçbir şekilde önişlemci program sizin başlık dosyanızın içine ikinci kez girmeyecek.

#ifndef  ALI_H
#define  ALI_H
//code
#endif
-> "." makrolarda kullanılmadığı için "_" kullanılır.
-> Bu şekilde koruma yapılarak ön işlemci komutu bu başlık dosyası içeriğine 1 kez erişir.


#pragma once 'ı kullanarak multiple inclusion guard 'ın otomatik oluşturulmasını sağlarız.
örneğin;

#pragma  once                                                                            #ifndef  ALI_H
struct Date {                                                                            #define  ALI_H
  int d, m, y;          <---Yandaki gibi çoklu çağırmaya karşı koruma altına alır--->    struct Date {
};                                                                                           int d, m, y; 
                                                                                         };

-> Avantajı yazım pratiği kazandırması.
-> Endüstride kullanmak önerilmez, derleyiciler tanısada %100 standart değil.

KURAL : nutility isminde modül oluşturalım. (nutility.c ve nutility.h dosyaları). Bu modül sık kullandığımız fonksiyonları içersin.





















































































