Pointer (Adres) (Gösterci, İşaretçi)

Pointers
--------
1) Object Pointers (nesne adresleri)
2) Function Pointers (Fonksiyon adresleri)

-> ifade ==> adres  //Öyle ifadeler olacakki o ifadeler adres olacak.

-> Her bir ifadenin bir türü olduğuna göre adres anlamına gelen ifadelerinde türleri olmalı.

-> x bir değişken olsun ve x değişkeninin türü T olsun
  T x;
Eğer bir ifade x değişkeninin adresi anlamına geliyorsa o ifadenin türü T* türüdür.


-> int i;     ---(Adresinin türü)---> int*
-> char c;    ---(Adresinin türü)---> char*

-> int *p;  //ismi p olan bir pointer değişken tanımladık.
            //türü pointer to int veya int* türü

-> int *ptr;  //ptr int* türden bir değişkendir.


NOT1 :
int *ptr;  //Burada kullanılan * operatör değil declarator'dür.
*ptr  //Burada kullanılan * operatördür.

NOT2 : 
int arr[4];  //Burada kullanılan [] declarator'dür.
a[3]  //Burada kullanılan [] ise operatördür.

NOT3 : 
int *p1, p2, p3;    //Bu ifadede yalnızca p1 değişkeni pointer değişkendir. p2 ve p3 int türünde normal değişkenlerdir.

//Aşağıdaki ifade ile yukarıda kullanılan ifade aynı anlama gelmektedir.
int *p1;
int p2;
int p3;

NOT4 : 
int *p1, *p2, *p3;  //Buradaki tüm değişkenler int* türünde pointer değişkenlerdir.

//Aşağıdaki ifadeler ile yukarıda kullanılan ifade aynı anlama gelmektedir. 
int *p1;
int *p2;
int *p3;


-> Sistemlerde (tipik olarak) değişken adres türleri aynı storage gerektirir.
-> Yani değişkenlerin kendi türlerinin storage ihtiyacı farklı olabilir. Ama değişken adres anlamına gelen türler aynı storage değerindedir.

char   -> 1 byte            char*  -> 4 byte
short  -> 2 byte            short* -> 4 byte
int    -> 4 byte            int*   -> 4 byte
float  -> 4 byte            float* -> 4 byte
    .....                        .....

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
HATIRLATMA

int foo(int);
int main(void)
{
  int x = 5;
  int a[20];
  double dval = 3.4;
}

//x         --> L value çünkü değişken ismi anlamına gelen ifadeler her zaman L value'dir.
//a[3]      --> L value çünkü [] operatörü ile dizi elemanına erişmiş oluruz. Dolayısıyla o bir nesnedir. Bu yüzden L value.
//3456      --> Sabit anlamına gelen ifadeler her zaman R value'dir.
//foo(2)    --> Fonksiyon çağrı ifadeleri her zaman R value'dir.
//(int)dval --> Tür dönüştürme operatörü ile oluşturulan ifadeler R value'dir.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

pointer operatörleri
--------------------
&    address of operator               (adres)
*    dereferencing  operator           (içerik)
[]   index/subscript  operator         (indeks)
->   member selection (arrow) operator  (ok)

---------------------------------------------------------------------
NOT : Adres operatörünün operandı L value olmak zorundadır.
int x = 5;    olsun      &x;   geçerli ifade olur.

int x = 5;
&x  //ifadenin türü int*

double x = 5.4;
&x  //ifadenin türü double*
---------------------------------------------------------------------
int main(void)
{
  int x = 10;
  int y = 20;
  int* ptr = &x;  //ptr'nin değeri x'in adresi (ptr x'i gösteriyor.)

  ptr = &y;       //ptr'nin değeri y'nin adresi (ptr y'yi gösteriyor.)
}

-> C dilinde tamsayı türleri ile adres türleri arasında örtülü dönüşüm vardır.

int main(void)
{
  int x = 10;
  int y = 45;
  int* ptr = x;  //x'in türü int olmasına karşın örtülü dönüşüm ile onu int* türüne dönüştürecektir.
}

-> Bu yüzden pointer değişkenlere adres olmayan bir veriyi ilk değer olarak vermeyeceğiz, atama yapmayacağız.
   Bu kullanım C++'da sentaks hatası, C de implicit dönüşüm.

-> C dilinde farklı adres türleri arasında örtülü dönüşüm vardır.

int main(void)
{
  int x = 10;
  double* dp;
  dp = &x;  //int* 'dan double* 'a örtülü dönüşüm olur.
}


int main(void)
{
  int x = 10;
  int y = 56;

  int *p1 = &x;
  int* p2 = &y;

  p2 = p1;  //p2 'de x' in adresini gösteriyor p1' de.
}


int main(void)
{
  int x = 10;
  int* ptr = &x;
}

ptr [2800]  -----------> x[10] 2800;
ptr değişkeni'nin değeri 2800 'dür. Bu değer x'in adres değeridir. x 'in bulunduğu adres içerisinde bulunan değer ise 10'dur. (yani x in değeri 10)

DİKKAT : Adress of operatörü ile oluşturulmuş ifadeler her zaman R value expression'dur.

int main(void) 
{
  int x = 10;
  printf("&x = %p\n", &x);  //Değişken adresini yazdırmak için %p kullanılır.
}  //Mikroişlemcilerdeki gibi 16'lık sayı sisteminde adres değerlerini gösterir.


NOT : 
ptr bir pointer değişken olsun ve x'i göstersin. Karıştırılmaması gereken bir durumda ptr x'in adres değerini tutuyor fakat ptr değişkenide bir adreste saklanıyor.

int x = 10;
int* ptr = &x;

ptr[2800] 9000  -----------> x[10] 2800


-> &a[0] -> Bu ifade array decay geçirdikten sonra L value'den R value durumuna geçer.


-> Aşağıdaki durumlarda a bir dizi olmasına rağmen ve a ismi bir ifade içinde kullanılmasına rağmen array decay uygulanmaz.

1) Dizi isminin sizeof operatörünün operandı olması.  sizeof a
2) Dizi isminin adres operatörünün operandı olması.  &a
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
* operatörü (dereferencing // indirection) (içerik operatörü)
-------------------------------------------------------------

Dikkat -> İçerik (dereferencing) operatörünün operandı "adres olmak zorunda"

int a[3] = {0}

*a -> geçerli bir ifade.  //derleyicinin bakış açısı ile *&a[0] yazmış oluruz.

dereferencing operatörü : operandı olan adresteki nesneye erişim sağlar.

*adres -> Bu adresteki nesne demek.

--------------o-------------
int x = 34;
int* ptr = &x;
*ptr = 777;  //x'in değerini 777 yaptık.
--------------o-------------
int main(void)
{
  int x = 34;
  int y = 89;
  
  int* p1 = &x;
  int* p2 = &y;

  *p1 = *p2;  //x = y ile aynı anlamda x in değeri bu ifade ile 89 oldu.
}
--------------o-------------
int main(void)
{
  int a[5] = {1, 3, 5, 7, 9};
  printf("%d\n", a[0]);  // 1

  *a = 999;      // *&a[0] = 999; array decay
  //a[0] = 999; yukarıdaki ifade ile aynı anlamda.

  printf("%d\n", a[0]); // 999
}
--------------o-------------

->     ++*a;  <--------->  ++(*a);


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

call by reference
------------------
-> Fonksiyona main koddaki değişkenimizin adresini yollar isek ve yolladığımız değişkeni karşılayan fonksiyon parametresi pointer değişken ise bu sayede
yolladığımız değişken adresi üzerinden o değişken ile ilgili değişiklik yapabiliriz.

#include <stdio.h>

void foo(int* p)
{
	*p = 999;
}

int main(void)
{
  int x = 345;
  
  printf("Eski x degeri : %d\n", x);
  
  foo(&x);
  
  printf("Yeni x degeri : %d\n", x);
}	

-> Neden bir fonksiyonun parametresi bir pointer olur? Yani neden call by reference yapılır?
   Bir fonksiyon kendisini çağıran koda bir değer iletmek istesin. 2 şekilde yapabilir.
   - geri dönüş değeri
   - call by reference

-> Geri dönüş değerinden kaçınıp call by reference kullanılan noktalar : 
  İletilecek değerin sizeof'u yüksek olduğu durumlarda maliyet hesabından dolayı call by reference tercih edilir.

-> Hesaplanacak değer 4 byte, 8 byte vs. gibi az yer kaplayan bir türe ilişkinse o zaman geri dönüş değeri mekanizmasının kullanılması tercih edilir.
-> Aksi durumda yani hesaplanan değer farklı türde yüksek storage değerine sahipse call by reference kullanılır.

-> Bir fonksiyon geri dönüş değeri mekanizması ile tek bir değer döndürebilir.
   Fakat call by reference ile birden fazla işlem gerçekleştirip sayıca fazla değer döndürebiliriz.


--------------------------------------------------------------------------------------
const anahtar sözcüğünün call by reference'teki yarattığı etki aşağıda yer almaktadır.
--------------------------------------------------------------------------------------

void foo(T *p);  //out parameter
-> Sen bana adres gönder, ben sana senin gönderdiğin adresteki nesneye yazarak sana değeri ileteceğim demek.

void bar(const T *p);  //input parameter
-> Ben senden adres istiyorum ama istediğim adresteki nesneye salt okuma amaçlı erişim sağlayacağım. O nesneyi ben input'um olarak kullanacağım diyor.

bar fonksiyonunda call by value kullanabilirdik.
void bar (T);  //Doğrudan böyle bir kullanım yapmama amacımız MALİYET.

ÖNEMLİ NOT : Fonksiyonlara dizilerin call by value olarak gönderilmesi gibi bir seçenek söz konusu değildir.

DİKKAT!!!
1) C dilinde bir fonksiyonun parametre değişkeni bir dizi olamaz.
2) C dilinde bir fonksiyonun geri dönüş değeri türü bir dizi türü olamaz.
3) Yani, bir fonksiyonun bir fonksiyona bir dizi göndermesi (ne amaçla olursa olsun) adres yoluyla olmak zorunda.












